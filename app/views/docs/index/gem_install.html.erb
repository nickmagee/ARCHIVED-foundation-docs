<div class="row">
  <section role="main">
    <div class="row">
      <div class="eight columns">

        <dl class="tabs" style="margin-top: 3px;">
          <dd class="active"><a href="#simple1">Compass</a></dd>
          <dd><a href="#simple2">Rails</a></dd>
        </dl>

        <ul class="tabs-content">
          <li class="active" id="simple1Tab">
            <h3>Installing with Compass</h3>
            <h4 class="subheader">Start using Foundation the way you want, with more control than ever before.</h4>

            <dl class="sub-nav">
              <dt>Go to:</dt>
              <dd><a href="#installing">Installing</a></dd>
              <dd><a href="#settings">Settings</a></dd>
              <dd><a href="#imports">Custom Imports</a></dd>
              <dd><a href="#mixins">Mixins &amp; Functions</a></dd>
            </dl>

            <hr>

            <a name="installing"></a>
            <h4>Installation</h4>
            <p>To create your first project using our Compass extension, you'll need to have the zurb-foundation gem installed. This includes all the necessary dependencies that you'll need to get going.</p>
            <pre><code data-language="shell">> [sudo] gem install zurb-foundation</code></pre>
            <em style="position: relative; top: -20px; font-size: 12px;">Note: Make sure you aren't using 'ZURB-foundation' as that is the 2.2 version.</em>

            <h5>Installation Release Candidate Versions of the Gem</h5>
            <p>You can use pre-release versions of the gem as we update them. We use these as a way to try out changes to the gem before we feel 100% comfortable with calling it final. We usually release final versions on Fridays.</p>
            <p class="btm-marg keystroke">[sudo] gem install zurb-foundation --pre</p>

            <h5>Creating Your first project</h5>
            <pre><code data-language="shell">> cd path/to/where-you-want-your-project
> compass create &lt;project-name&gt; -r zurb-foundation --using foundation</code></pre>

            <p class="btm-marg">Now you should have a new project folder created with foundation included along with all the awesome advantages that comes with <a href="http://sass-lang.com/" rel="nofollow">Sass</a> and <a href="http://compass-style.org/" rel="nofollow">Compass</a>.</p>
            
            <h5>Adding Foundation to an existing Compass project</h5>
            <ul class="disc" style="margin-bottom: 35px;">
              <li>Add <span class="keystroke">require "zurb-foundation"</span> to your config.rb file</li>
              <li><span class="keystroke">cd path/to/your-project</span></li>
              <li>run <span class="keystroke">compass install foundation</span></li>
            </ul>
            
            <h5>Upgrading Your Gem</h5>
            <p>To upgrade your gem to the latest public release you just paste this line into your command line.</p>
            <p class="btm-marg keystroke">[sudo] gem update zurb-foundation</p>

            <h5>Upgrading Foundation in an existing Compass project</h5>
            <p>If you already added Foundation to your Compass project and just want to copy over any updated javascripts/image assets to your project use the provided <kbd>foundation/upgrade</kbd> pattern like so:</p>
            <p class="btm-marg keystroke">
              cd /path/to/your-project<br />
              compass install -r zurb-foundation foundation/upgrade --force
            </p>

            <div class="alert-box" style="margin-bottom: 30px;">As of August 10, 2012 and 3.0.8, when you upgrade an existing project you'll lose your custom settings. It's a good idea to copy your _settings.scss file for backup before you upgrade.</div>

            <h5>Using CodeKit?</h5>
            <p>We're using a cutting edge version of Sass that doesn't come with CodeKit. This means that you'll need to do a couple steps in order to get everything to compile correctly. Once Sass 3.2.0 is out of alpha it will be packaged with CodeKit, until then do this:</p>
            <ul class="disc">
              <li>Run `sudo gem environment` in the command line, note your gem paths.</li>
              <li>Go into <strong>Codekit prefs</strong>, click on <strong>Sass/Scss</strong></li>
              <li>Click on <strong>"Use the Sass Executable at this path:"</strong></li>
              <li>Navigate to the <strong>bin</strong> folder at the gem path you found earlier.</li>
              <li>Select sass.bin</li>
            </ul>

            <hr>

            <a name="settings"></a>
            <h3>Settings</h3>
            <h4 class="subheader">Work with your own colors, font sizes, radii, etc by adjusting the _settings.scss file in your new project!</h4>
            <p>We include a _settings.scss file with every new compass project, this file contains the default variables used through foundation which you can uncomment and. changes to match your needs.</p>

            <h5>Grid Settings</h5>
            <ul class="disc">
              <li><strong>$rowWidth:</strong> Width of the grid.</li>
              <li><strong>$columnGutter:</strong> Width of the gutter.</li>
              <li><strong>$totalColumns:</strong> Adjust how many columns are in the grid.</li>
              <li><strong>$mobileTotalColumns:</strong> Adjust how many columns in the mobile grid.</li>
            </ul>            
            <pre><code data-language="css">// Grid Settings
$rowWidth: 1000px;
$columnGutter: 30px;
$totalColumns: 12;
$mobileTotalColumns: 4;</code></pre>

            <h5>Colors</h5>
            <ul class="disc">
              <li><strong>$mainColor:</strong> Adjust the main color for your website.</li>
              <li><strong>$secondaryColor:</strong> Secondary color for calls to action, etc.</li>
              <li><strong>$alertColor:</strong> The color associated with alerts or errors.</li>
              <li><strong>$successColor:</strong> The color associated with success.</li>
              <li><strong>$txtColor:</strong> Adjust the color of your body copy.</li>
              <li><strong>$highlightColor:</strong> What color highlighter do you want?</li>
              <li><strong>$black:</strong> Used to create grays with color mixins.</li>
              <li><strong>$white:</strong> Also used to create grays with color mixins.</li>
              <li><strong>$shinyEdge:</strong> Adjust the shiny edge inner box-shadow of the buttons, etc.</li>
              <li><strong>$darkEdge:</strong> Adjust the dark edge inner box-shadow of buttons, etc.</li>
            </ul>
            <!-- <span class="btm-marg"><script src="https://gist.github.com/3008672.js?file=color-settings.scss"></script></span> -->
            <pre><code data-language="css">// Colors Settings
$mainColor: #2ba6cb;
$secondaryColor: #e9e9e9;
$alertColor: #c60f13;
$successColor: #5da423;
$txtColor: #222;
$highlightColor: #ffff99;
$black: #000;
$white: #fff;
$shinyEdge: rgba(#fff, .5);
$darkEdge: rgba(#000, .2);</code></pre>

                          <h5>Button Settings</h5>
            <ul class="disc">
              <li><strong>$buttonRadius:</strong> Adjust the rounded edges of elements with radii.</li>
              <li><strong>$btnBase:</strong> Adjust the size of your buttons based on their top/bottom padding.</li>
              <li><strong>$[tiny, small, large]BtnBase:</strong> Adjust the ratio that your buttons scale by adjust this math.</li>
            </ul>
            <pre><code data-language="css">// Button Settings
$buttonRadius: 3px;
$btnBase: 10px;
$tinyBtnBase: $btnBase - 5;
$smallBtnBase: $btnBase - 3;
$largeBtnBase: $btnBase + 5;</code></pre>

            <h5>Typography Settings <small>These require modular-scale, which comes with Foundation</small></h5>
            <ul class="disc">
              <li><strong>$headerFontFamily:</strong> Font family for headers.</li>
              <li><strong>$headerFontWeight:</strong> Font weight for headers.</li>
              <li><strong>$headerFontColor:</strong> Font color for headers.</li>
              <li><strong>$bodyFontFamily:</strong> Font family for the body.</li>
              <li><strong>$bodyFontWeight:</strong> Font weight for the body.</li>
              <li><strong>$bodyFontColor:</strong> Font color for the body, uses $txtColor.</li>
              <li><strong>$ratio:</strong> A few ratios: $golden, $major-fifth, $major-sixth, $fifth, $augfourth</li>
              <li><strong>$baseFontSize:</strong> Change the base paragraph size for modular-scale.</li>
              <li><strong>$importantModNum:</strong> Change the important number for modular-scale.</li>
            </ul>
            <pre><code data-language="css">// Typography Settings

$headerFontFamily: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
$headerFontWeight: bold;
$headerFontColor: #222;
$bodyFontFamily: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
$bodyFontWeight: normal;
$bodyFontColor: $txtColor;

...

// Modular Scale

$ratio: $golden;
$baseFontSize: 14px;
$importantModNum: 44px;</code></pre>

            <h5>Other UI Settings</h5>
            <ul class="disc">
              <li><strong>$formSpacing:</strong> Change how far apart columned forms are.</li>
              <li><strong>$tabHeight:</strong> Change how tall you want your tabs.</li>
              <li><strong>$navBarHeight:</strong> Change how tall you want your navbar to be.</li>
              <li><strong>$navFlyoutBaseWidth:</strong> The base number used to calculate dropdown widths.</li>
              <li><strong>$hasTipBorderBottom:</strong> Dotted border color on words with tips.</li>
              <li><strong>$hasTipFontWeight:</strong> Font weight for words with tips.</li>
              <li><strong>$hasTipFontColor:</strong> Font color for words with tips.</li>
              <li><strong>$hasTipBorderBottomHover:</strong> Dotted border color on hover for words with tips.</li>
              <li><strong>$hasTipFontColorHover:</strong> Font color on hover for words with tips.</li>
              <li><strong>$tooltipBackgroundColor:</strong> Background color of the tooltip flyout.</li>
              <li><strong>$tooltipBackgroundOpacity:</strong> Opacity of the background color.</li>
              <li><strong>$tooltipFontSize:</strong> Font size of the words inside a tooltip.</li>
              <li><strong>$tooltipFontWeight:</strong> Font weight of the words inside a tooltip.</li>
              <li><strong>$tooltipFontColor:</strong> Font color of the words inside a tooltip.</li>
              <li><strong>$tapToCloseFontSize:</strong> Font size of the words "tap to close" on mobile.</li>
              <li><strong>$tapToCloseFontWeight:</strong> Font weight of the words "tap to close" on mobile.</li>
              <li><strong>$tapToCloseFontColor:</strong> Font color of the words "tap to close" on mobile.</li>
              <li><strong>$tooltipFontSizeScreenSmall:</strong> Font size for tooltips on mobile.</li>
              <li><strong>$tooltipBackgroundOpacityScreenSmall:</strong> Background opacity for tooltips on mobile.</li>
            </ul>
            <pre><code data-language="css">// Form Settings
$formSpacing: 12px;

// Tab Settings
$tabHeight: 40px;

// Nav Bar Settings
$navBarHeight: 40px;
$navFlyoutBaseWidth: 250px;

// Tooltip Settings
$hasTipBorderBottom: dotted 1px #ccc;
$hasTipFontWeight: bold;
$hasTipFontColor: #333;
$hasTipBorderBottomHover: dotted 1px darken($mainColor, 20%);
$hasTipFontColorHover: $mainColor;
$tooltipBackgroundColor: #000;
$tooltipBackgroundOpacity: 0.85;
$tooltipFontSize: 12;
$tooltipFontWeight: bold;
$tooltipFontColor: #fff;
$tapToCloseFontSize: 10;
$tapToCloseFontWeight: normal;
$tapToCloseFontColor: #888;
$tooltipFontSizeScreenSmall: 14;
$tooltipBackgroundOpacityScreenSmall: 0.85;</code></pre>

            <hr>

            <a name="imports"></a>
            <h3>Custom Imports</h3>
            <h4 class="subheader">You can customize which parts of Foundation are included in your compiled CSS.</h4>
            <p>We've included a simple way for you to control which parts of Foundation you want. Beware that some of the files require certain mixins, but Compass will let you know.</p>

            <h5>Basic Import (The Kitchen Sink)</h5>
            <p>By default, these settings are uncommented which included all of Foundation. You will always want to keep your settings uncommented, but you can uncomment the second import when you are customizing.</p>
            <pre><code data-language="css">// You custom settings file to override Foundation defaults
@import "settings";

// Comment out this import if you are customizing you imports below
@import "foundation";</code></pre>

            <h5>Customizing Your Imports</h5>
            <p>When you are customizing, you must always include this set of files to ensure proper behavior.</p>
            <pre><code data-language="css">// ----------------------------------------
// Import specific parts of Foundation by commenting the import "foundation"
// and uncommenting what you want below. You must uncomment the following if customizing

// @import "compass/css3";
// @import "foundation/settings";
// @import "foundation/function/all";
// @import "foundation/common/globals";
// @import "foundation/mixins/clearfix";</code></pre>

            <p>The next bit of code controls which common elements get included. Certain elements will throw an error to let you know if they rely on a mixin you haven't included.</p>
            <pre><code data-language="css">// Control which mixins you have access too

// @import "foundation/mixins/css-triangle";
// @import "foundation/mixins/font-size";

// Must include next three for semantic grid to work

// @import "foundation/mixins/respond-to";
// @import "foundation/mixins/semantic-grid";

// Must include the grid for any responsiveness

// @import "foundation/components/grid";

// Control which common styles get compiled

// @import "foundation/common/typography";
// @import "foundation/common/forms";</code></pre>

            <p>Finally, you can control which components are compiled at the top of your app.css file by uncommenting what you desire.</p>
            <pre><code data-language="css">// Control which components you get if customizing

// @import "foundation/components/modules/buttons";
// @import "foundation/components/modules/tabs";
// @import "foundation/components/modules/ui";
// @import "foundation/components/modules/navbar";
// @import "foundation/components/modules/orbit";
// @import "foundation/components/modules/reveal";
// @import "foundation/components/modules/offcanvas";</code></pre>

            <p><strong>Note: Watch for Compass to throw errors to let you know what you aren't including.</strong></p>
            <hr>

            <a name="mixins"></a>
            <h3>Mixins &amp; Functions</h3>
            <h4 class="subheader">We wrote some awesome mixins and function that you can use for semantic grids, CSS triangles and more!</h4>

            <h5>Semantic Grid</h5>
            <p>Are you tired of adding extra divs just to include classes for building your grid? We are too! Our semantic grid mixins will help you write more semantic markup. Here's how they work:</p>
            <ul class="disc">
              <li><strong>@include outerRow();</strong> Create container rows to start the grid.</li>
              <li><strong>@include innerRow();</strong> Nested rows, must be inside a column.</li>
              <li><strong>@include innerRow(collapse);</strong> Collapse the margins of a nested row.</li>
              <li><strong>@include column(#);</strong> Create columns inside of any row. It must contain a number.</li>
              <li><strong>@include column(#, center);</strong> Center your columns within a row.</li>
              <li><strong>@include column(#, collapse);</strong> Collapse the column gutter for postfix and prefix elements.</li>
              <li><strong>@include offsetBy(#);</strong> Offset your columns to the right.</li>
              <li><strong>@include push(#);</strong> Source ordering to push columns around.</li>
              <li><strong>@include pull(#);</strong> Source ordering to pull columns around.</li>
              <li><strong>@include mobileRow();</strong> Create rows that appear on mobile layouts.</li>
              <li><strong>@include mobileColumn(#);</strong> Create mobile columns inside mobile rows.</li>
              <li><strong>@include mobilePush(#);</strong> Source ordering to push columns around on mobile.</li>
              <li><strong>@include mobilePull(#);</strong> Source ordering to pull columns around on mobile.</li>
            </ul>
            <span>
              <strong>Markup Example:</strong>
              <pre><code data-language="html"><header>
  <aside></aside>
  <section>
    <article>
      <header></header>
      <div></div>
    </article>
  </section>
</header></code></pre>
            </span>
            <span class="btm-marg">
              <strong>SCSS Example:</strong>
              <pre><code data-language="css">header { @include outerRow();
  aside { @include column(4); }
  section { @include column(8); 
    article { @include innerRow();
      header { @include column(2);
               mid-width: 0; }
      div { @include column(10); }
    }
  }
}</code></pre>
            </span>

            <h5>Modular Scale</h5>
            <p>The typography in Foundation is set to a specific <a href="https://github.com/scottkellum/modular-scale" rel="nofollow">modular scale</a>, which you can update in your _settings.scss file. In order to utilize the scale, you must follow the correct syntax.</p>
            <ul class="disc">
              <li><strong>ms(#);</strong> Tell your font which number from the scale to use.</li>
            </ul>
            <pre><code data-language="css">.element {
  font-size: ms(0); /* 0 = first in scale, 1,2,3 and so on... */
}</code></pre>

            <h5>Font Size</h5>
            <p>If you feel like breaking out of the modular scale or not using the provided function, you can use our font-size mixin!</p>
            <ul class="disc">
              <li><strong>@include font-size(size);</strong> Outputs 'px' and 'rem' for the number you include!</li>
            </ul>
            <pre><code data-language="css">.element {
  @include font-size(18);
}</code></pre>

            <h5>CSS Triangles</h5>
            <p>If you are unfamiliar with CSS triangles, learn more <a href="http://css-tricks.com/snippets/css/css-triangle/">here.</a> We use them all over in foundation for things like the arrows in dropdowns and pips on tooltips flyouts.</p>

            <ul class="disc">
              <li><strong>@include cssTriangle(size, color, direction);</strong> Easily create awesome triangles!</li>
            </ul>
            <pre><code data-language="css">.element {
  @include cssTriangle(5px, #ff0000, [top, bottom, left, right]);
}</code></pre>

          </li>


          <li id="simple2Tab">

            <h3>Installing with Rails</h3>
            <h4 class="subheader">Start using Foundation in your Rails project.</h4>

            <dl class="sub-nav">
              <dt>Go to:</dt>
              <dd><a href="#gemfile">Gemfile</a></dd>
              <dd><a href="#install">Install</a></dd>
              <dd><a href="#advancedInstall">Advanced</a></dd>
              <dd><a href="#upgrading">Upgrading from 2.X</a></dd>
            </dl>

            <hr>

            <a name="gemfile"></a>
            <h4>Gemfile</h4>
            <p>First you'll want to add the following gems to the <strong>assets</strong> group in your Gemfile like so:</p>

            <pre><code data-language="ruby">group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'

  # Add these gems
  gem 'compass-rails', '~> 1.0.3'
  gem 'zurb-foundation', '~> 3.0.9'
end</code></pre>

            <p>Then run <strong>bundle install</strong> to install these gems.  You may see the following error:</p>

            <pre><code data-language="shell">Bundler could not find compatible versions for gem "sass":
In snapshot (Gemfile.lock):
  sass (3.1.20)

In Gemfile:
  zurb-foundation (~> 3.0.0) ruby depends on
    sass (= 3.2.0.alpha.244) ruby</code></pre>

            <p>If you see that don't panic, just run <strong>bundle update sass</strong> and you should be on your merry way!</p>

            <h5>Notes on SASS alpha dependency</h5>
            <p>Foundation is currently utilizing some of the new media query features available in SASS 3.2, such as those mentioned in <a href="http://thesassway.com/intermediate/responsive-web-design-in-sass-using-media-queries-in-sass-32" rel="nofollow">this article.</a>  From what we've seen so far this is a stable enough release on which to build Foundation, especially since 3.2 is due to be released soon.</p>
            
            
            <a name="install"></a>
            <h4>Installation</h4>
            <p>To use Foundation there's a few steps involved, nothing too complicated.  Don't worry we made some generators to automate most of this boring work.  Use the following generators to get things going:</p>
            
            <h5>rails g foundation:install</h5>
            <p>This will create <strong>app/assets/stylesheets/foundation_and_overrides.scss</strong> in your project. This file will be imported in your <strong>app/assets/stylesheets/application.css</strong> sprockets manifest file.</p>
            
            <h5>rails g foundation:layout</h5>
            <p>This will provide an application layout that sets the width for mobile devices.  The generated file will replace <strong>app/views/layouts/application.html.erb</strong>.</p>
            
            <a name="configuration"></a>
            <h4>Advanced</h4>
            <p>If you don't wish to use the generators (or are adding Foundation to an existing project) here's all the steps you'll need to follow to get it working.</p>
            
            <h5>Layout</h5>
            <p>Add the following to the <strong>&lt;head&gt;</strong> tag of your page layouts (i.e. <strong>app/views/layouts/application.html.erb</strong>) to set the viewport width for mobile devices.</p>

            <pre><code data-language="html"><!-- 
Place this in <head></head>
Set the viewport width to device width for mobile
-->
<meta name="viewport" content="width=device-width, initial-scale=1.0" /></code></pre>

            <h5>SASS Files</h5>
            <p>Since Foundation is now SASSified you'll need to include it a little differently.  If you're using a standard Rails installation you should rename <strong>application.css</strong> to <strong>application.scss</strong> in the <strong>app/assets/stylesheets</strong> directory.</p>

            <pre><code data-language="css">@import "foundation";</code></pre>

            <p>That will import all the foundation related styles into your application.  Take a look at the other documentation pages if you'd like to further customize the stylesheet that gets generated.</p>

            <h5>Javascripts</h5>
            <p>To include all the Foundation related javascripts on your page add <strong>=require foundation</strong> to your <strong>app/assets/javascripts/application.js</strong> sprockets manifest file.</p>
            <pre><code data-language="javascript">//= require foundation
//= require foundation/app</code></pre>

            <a name="upgrading"></a>
            <h4>Upgrading from 2.X</h4>

            <p>For those of you upgrading from a previous version of the gem things are a little different.  In your <strong>app/assets/stylesheets/application.css</strong> you probably had a bit of code like this:</p>

            <pre><code data-language="css">/*
=require foundation
*/</code></pre>

            <p>Just rename <strong>application.css</strong> to <strong>application.scss</strong> making sure to replace any <strong>=require</strong> to the sass <strong>@import</strong> syntax.</p>

          </li>
        </ul>

      </div>
      <div class="four columns">
        <%= render "download" %>
      </div>
    </div>
  </section>

  <%= render "sidebar" %>
</div>